============================================================
             - CHEMICAL METABOLISM SIMULATOR -
============================================================

An open-source chemical reaction modeling platform.

This project is available at:
http://github.com/jpg18/metabolism/


Dependencies
============================================================

This project uses the following:

   SIMD-oriented Fast Mersenne Twister (SFMT)
      A random number generator. The SFMT libraries have
      been modified for saving and restoring state and are
      included with the source code, but the project page
      can be found at
      http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/.

   ncurses
      An API for building text user interfaces. Used by
      default but not required (see 'Compilation
      Instructions'). Available at
      http://www.gnu.org/software/ncurses/.

   R
      Statistical computing software. Scripts provided for
      analysis. Not required for compiling or running the
      simulation. Available at
      http://www.r-project.org/.

   tikzDevice
      LaTeX graphics for R. Optional parameter 'uselatex'
      for each R script allows LaTeX documents to be built
      instead of PDFs. Available at
      http://r-forge.r-project.org/projects/tikzdevice/.


Compilation Instructions
============================================================

Compiles with g++ (Ubuntu 4.4.1-4ubuntu9) 4.4.1.

Execute the following for a standard compilation:

   cd metabolism/src
   make

The program created is called "metabolism". By default,
ncurses is linked to the program. If developer's libraries
are not available, the program can be compiled without
ncurses using the following:

   cd metabolism/src
   make metabolism-no-ncurses

The program created will then be called
"metabolism-no-ncurses".


An Example Simulation and Analysis
============================================================

Once compiled, try running:

   ./metabolism --no-gui -x 512 -y 512 --iters 200 --atoms 39322

This will run a quick simulation with the default reaction
system enabled. Data is output to the files diffusion.out
and census.out, and the simulation parameters are recorded
in config.out. To conduct a reaction rate analysis, run:

   ../scripts/rate_analysis.R second 0.5 config.out census.out plots stats.out false

(The parameters here are explained at the beginning of the
script's comments.) A PDF file is generated and some
statistics are stored in the file stats.out. View the PDF:

   evince plots.pdf

Notice that the data deviates from the expected trajectory
(the red line). Now try:

   ./metabolism --no-gui -x 512 -y 512 --iters 200 --atoms 39322 --shuffle
   ../scripts/rate_analysis.R second 0.5 config.out census.out plots stats.out false
   evince plots.pdf

This will run the same simulation with shuffling of particle
positions each iteration. Shuffling simulates mixing. Now
the data fits the expected trajectory much better.


Using the Simulation Platform
============================================================

All command line options are available via --help and can be
used to specify simulation parameters such as the size of
the lattice or the number of particles. By default, the
program produces a configuration file named config.out (the
name can be specified using --files) which records the
simulation parameters. config files can be loaded to run
exact reproductions of simulations using --load.

To change the types of particles in the lattice or the
reactions that are defined in the reaction table, you will
need to create a custom config file or use one of the
provided files in metabolism/load. Create a new file and
fill it with any parameters you would like to specify using
the format:

   keyword value

with separate lines for each parameter. Parameters that can
be specified and examples of valid values are:

   atoms 99
   iters 5000
   seed 1234567890
   x 2000
   y 1000
   shuffle on
   reactions off

In addition to these (which are described in more detail in
--help), particle types and reactions can be specified using
the keywords "ele", "rxn", and "init". Add one line
beginning with "ele" for each particle type ("element")
using the following format:

   ele name symbol color charge

"name" is a string, "symbol" is a single character that is
used to represent particles of that type in the ncurses text
interface, and "color" and "charge" are integers (currently
not used).

An example will help clarify how to build a config file. The
Michaelis-Menten enzyme kinetics system consists of three
reactions: E + S -> ES, ES -> E + S, and ES -> E + P. The
particle types for this system could be defined using:

   ele Enzyme E 0 0
   ele Substrate S 0 0
   ele ES F 0 0
   ele Product P 0 0

When specifying reactions, each unique reaction should
receive its own line beginning with "rxn". Up to two
reactants can be specified (reaction orders higher than
2 are not supported), and up to two products can be
specified. Use the format:

   rxn prob [n] reactant [+] [n] [reactant] -> [n] product [+] [n] [product]

"prob" is the probability between 0 and 1 of the reaction
occurring when the reactants "collide". "reactant" and
"product" are the names of particle types. If you would like
to define a zeroth-order reaction, or if you would like your
reactants to annihilate one another, use the placeholder
symbol "*" for the reactants or products, respectively
(e.g., * -> A, or A -> *). "n" is a stoichiometric
coefficient. Since at most two reactants and two products
can be specified, this number must be either "1" (in which
case it is not necessary) or "2" (in which case there can be
no other reaction participants listed on that side of the
reaction arrow). Additionally, at most two separate
reactions can be specified with the same set of reactants.
All particle types must be listed in a config file before
any reactions that use them.

For our example, the Michaelis-Menten reactions could be
listed using:

   rxn 0.50 Enzyme + Substrate -> ES
   rxn 0.01 ES -> Enzyme + Substrate
   rxn 0.01 ES -> Enzyme + Product

with "prob"'s = 0.5, 0.01, and 0.01.

Finally, although the number of particles placed in the
lattice is set by a command line option, the initial types
for each particle must be specified in the config file. Use
the keyword "init" to start a list of initial particle
types:

   init n name [...]

"n" is the number of types in the list, and "name"'s are the
names of the particle types. The type for each particle when
it is created at the start of the simulation will be chosen
at random from this list. If "n" is "0", then no particles
will be placed in the lattice. Types included in this list
must be defined earlier in the config file.

For the Michaelis-Menten example, we could use:

   init 4 Enzyme Substrate Substrate Substrate

to create a 3:1 ratio of Substrate to Enzyme for the
particles initially placed in the lattice.

If a config file is not used, or if a config file is used
that lacks any lines that begin with "ele", then the types
"A", "B", "C", and "D" are defined by default. If the config
file lacks any "rxn" lines, the reaction A + B -> C + D
(prob = 0.5) is defined. If the config file has no line
beginning with "init", then the particles will start with
types A and B in roughly a 1:1 ratio.

============================================================

